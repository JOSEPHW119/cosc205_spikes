'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FitnessAppDB")>
Partial Public Class FitnessAppDBDataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertUser(instance As User)
	End Sub
	Partial Private Sub UpdateUser(instance As User)
	End Sub
	Partial Private Sub DeleteUser(instance As User)
	End Sub
#End Region

	Public Sub New()
		MyBase.New(Global.UserDataForm.My.MySettings.Default.FitnessAppDBConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _email As String
	
	Private _age As Integer
	
	Private _height_cm As Integer
	
	Private _weight_kg As Integer
	
	Private _gender As String
	
	Private _goal As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnageChanging(value As Integer)
    End Sub
    Partial Private Sub OnageChanged()
    End Sub
    Partial Private Sub Onheight_cmChanging(value As Integer)
    End Sub
    Partial Private Sub Onheight_cmChanged()
    End Sub
    Partial Private Sub Onweight_kgChanging(value As Integer)
    End Sub
    Partial Private Sub Onweight_kgChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OngoalChanging(value As String)
    End Sub
    Partial Private Sub OngoalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_age", DbType:="Int NOT NULL")>  _
	Public Property age() As Integer
		Get
			Return Me._age
		End Get
		Set
			If ((Me._age = value)  _
						= false) Then
				Me.OnageChanging(value)
				Me.SendPropertyChanging
				Me._age = value
				Me.SendPropertyChanged("age")
				Me.OnageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_height_cm", DbType:="Int NOT NULL")>  _
	Public Property height_cm() As Integer
		Get
			Return Me._height_cm
		End Get
		Set
			If ((Me._height_cm = value)  _
						= false) Then
				Me.Onheight_cmChanging(value)
				Me.SendPropertyChanging
				Me._height_cm = value
				Me.SendPropertyChanged("height_cm")
				Me.Onheight_cmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight_kg", DbType:="Int NOT NULL")>  _
	Public Property weight_kg() As Integer
		Get
			Return Me._weight_kg
		End Get
		Set
			If ((Me._weight_kg = value)  _
						= false) Then
				Me.Onweight_kgChanging(value)
				Me.SendPropertyChanging
				Me._weight_kg = value
				Me.SendPropertyChanged("weight_kg")
				Me.Onweight_kgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(50)")>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goal", DbType:="VarChar(50)")>  _
	Public Property goal() As String
		Get
			Return Me._goal
		End Get
		Set
			If (String.Equals(Me._goal, value) = false) Then
				Me.OngoalChanging(value)
				Me.SendPropertyChanging
				Me._goal = value
				Me.SendPropertyChanged("goal")
				Me.OngoalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
